/*
 * generated by Xtext 2.38.0
 */
package org.aditi.course.scheduler.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.aditi.course.scheduler.courseScheduler.Availability;
import org.aditi.course.scheduler.courseScheduler.Course;
import org.aditi.course.scheduler.courseScheduler.CourseScheduler;
import org.aditi.course.scheduler.courseScheduler.CourseSchedulerPackage;
import org.aditi.course.scheduler.courseScheduler.Room;
import org.aditi.course.scheduler.courseScheduler.TimeSlot;
import org.aditi.course.scheduler.services.CourseSchedulerGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class CourseSchedulerSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private CourseSchedulerGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == CourseSchedulerPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case CourseSchedulerPackage.AVAILABILITY:
				sequence_Availability(context, (Availability) semanticObject); 
				return; 
			case CourseSchedulerPackage.COURSE:
				sequence_Course(context, (Course) semanticObject); 
				return; 
			case CourseSchedulerPackage.COURSE_SCHEDULER:
				sequence_CourseScheduler(context, (CourseScheduler) semanticObject); 
				return; 
			case CourseSchedulerPackage.ROOM:
				sequence_Room(context, (Room) semanticObject); 
				return; 
			case CourseSchedulerPackage.TIME_SLOT:
				sequence_TimeSlot(context, (TimeSlot) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Availability returns Availability
	 *
	 * Constraint:
	 *     (day=Day start=TIME end=TIME)
	 * </pre>
	 */
	protected void sequence_Availability(ISerializationContext context, Availability semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CourseSchedulerPackage.Literals.AVAILABILITY__DAY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CourseSchedulerPackage.Literals.AVAILABILITY__DAY));
			if (transientValues.isValueTransient(semanticObject, CourseSchedulerPackage.Literals.AVAILABILITY__START) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CourseSchedulerPackage.Literals.AVAILABILITY__START));
			if (transientValues.isValueTransient(semanticObject, CourseSchedulerPackage.Literals.AVAILABILITY__END) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CourseSchedulerPackage.Literals.AVAILABILITY__END));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAvailabilityAccess().getDayDayEnumRuleCall_0_0(), semanticObject.getDay());
		feeder.accept(grammarAccess.getAvailabilityAccess().getStartTIMETerminalRuleCall_1_0(), semanticObject.getStart());
		feeder.accept(grammarAccess.getAvailabilityAccess().getEndTIMETerminalRuleCall_3_0(), semanticObject.getEnd());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     CourseScheduler returns CourseScheduler
	 *
	 * Constraint:
	 *     elements+=Element+
	 * </pre>
	 */
	protected void sequence_CourseScheduler(ISerializationContext context, CourseScheduler semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns Course
	 *     Course returns Course
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         teacherName=STRING 
	 *         teacherId=STRING 
	 *         duration=INT 
	 *         sessions=INT 
	 *         studentCount=INT 
	 *         day=Day 
	 *         batches+=STRING 
	 *         batches+=STRING* 
	 *         prefers+=Day 
	 *         prefers+=Day* 
	 *         preferredSessions+=INT 
	 *         preferredSessions+=INT*
	 *     )
	 * </pre>
	 */
	protected void sequence_Course(ISerializationContext context, Course semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns Room
	 *     Room returns Room
	 *
	 * Constraint:
	 *     (name=STRING capacity=INT availability+=Availability availability+=Availability*)
	 * </pre>
	 */
	protected void sequence_Room(ISerializationContext context, Room semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Element returns TimeSlot
	 *     TimeSlot returns TimeSlot
	 *
	 * Constraint:
	 *     (name=STRING start=TIME end=TIME)
	 * </pre>
	 */
	protected void sequence_TimeSlot(ISerializationContext context, TimeSlot semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, CourseSchedulerPackage.Literals.ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CourseSchedulerPackage.Literals.ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, CourseSchedulerPackage.Literals.TIME_SLOT__START) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CourseSchedulerPackage.Literals.TIME_SLOT__START));
			if (transientValues.isValueTransient(semanticObject, CourseSchedulerPackage.Literals.TIME_SLOT__END) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, CourseSchedulerPackage.Literals.TIME_SLOT__END));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTimeSlotAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getTimeSlotAccess().getStartTIMETerminalRuleCall_2_0(), semanticObject.getStart());
		feeder.accept(grammarAccess.getTimeSlotAccess().getEndTIMETerminalRuleCall_4_0(), semanticObject.getEnd());
		feeder.finish();
	}
	
	
}
