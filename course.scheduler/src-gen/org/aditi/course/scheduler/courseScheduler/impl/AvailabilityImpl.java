/**
 * generated by Xtext 2.38.0
 */
package org.aditi.course.scheduler.courseScheduler.impl;

import org.aditi.course.scheduler.courseScheduler.Availability;
import org.aditi.course.scheduler.courseScheduler.CourseSchedulerPackage;
import org.aditi.course.scheduler.courseScheduler.Day;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Availability</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.aditi.course.scheduler.courseScheduler.impl.AvailabilityImpl#getDay <em>Day</em>}</li>
 *   <li>{@link org.aditi.course.scheduler.courseScheduler.impl.AvailabilityImpl#getStart <em>Start</em>}</li>
 *   <li>{@link org.aditi.course.scheduler.courseScheduler.impl.AvailabilityImpl#getEnd <em>End</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AvailabilityImpl extends MinimalEObjectImpl.Container implements Availability
{
  /**
   * The default value of the '{@link #getDay() <em>Day</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDay()
   * @generated
   * @ordered
   */
  protected static final Day DAY_EDEFAULT = Day.MON;

  /**
   * The cached value of the '{@link #getDay() <em>Day</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDay()
   * @generated
   * @ordered
   */
  protected Day day = DAY_EDEFAULT;

  /**
   * The default value of the '{@link #getStart() <em>Start</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStart()
   * @generated
   * @ordered
   */
  protected static final String START_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getStart() <em>Start</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStart()
   * @generated
   * @ordered
   */
  protected String start = START_EDEFAULT;

  /**
   * The default value of the '{@link #getEnd() <em>End</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnd()
   * @generated
   * @ordered
   */
  protected static final String END_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getEnd() <em>End</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEnd()
   * @generated
   * @ordered
   */
  protected String end = END_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AvailabilityImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return CourseSchedulerPackage.Literals.AVAILABILITY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Day getDay()
  {
    return day;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDay(Day newDay)
  {
    Day oldDay = day;
    day = newDay == null ? DAY_EDEFAULT : newDay;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CourseSchedulerPackage.AVAILABILITY__DAY, oldDay, day));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getStart()
  {
    return start;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setStart(String newStart)
  {
    String oldStart = start;
    start = newStart;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CourseSchedulerPackage.AVAILABILITY__START, oldStart, start));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getEnd()
  {
    return end;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEnd(String newEnd)
  {
    String oldEnd = end;
    end = newEnd;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, CourseSchedulerPackage.AVAILABILITY__END, oldEnd, end));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case CourseSchedulerPackage.AVAILABILITY__DAY:
        return getDay();
      case CourseSchedulerPackage.AVAILABILITY__START:
        return getStart();
      case CourseSchedulerPackage.AVAILABILITY__END:
        return getEnd();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case CourseSchedulerPackage.AVAILABILITY__DAY:
        setDay((Day)newValue);
        return;
      case CourseSchedulerPackage.AVAILABILITY__START:
        setStart((String)newValue);
        return;
      case CourseSchedulerPackage.AVAILABILITY__END:
        setEnd((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case CourseSchedulerPackage.AVAILABILITY__DAY:
        setDay(DAY_EDEFAULT);
        return;
      case CourseSchedulerPackage.AVAILABILITY__START:
        setStart(START_EDEFAULT);
        return;
      case CourseSchedulerPackage.AVAILABILITY__END:
        setEnd(END_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case CourseSchedulerPackage.AVAILABILITY__DAY:
        return day != DAY_EDEFAULT;
      case CourseSchedulerPackage.AVAILABILITY__START:
        return START_EDEFAULT == null ? start != null : !START_EDEFAULT.equals(start);
      case CourseSchedulerPackage.AVAILABILITY__END:
        return END_EDEFAULT == null ? end != null : !END_EDEFAULT.equals(end);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (day: ");
    result.append(day);
    result.append(", start: ");
    result.append(start);
    result.append(", end: ");
    result.append(end);
    result.append(')');
    return result.toString();
  }

} //AvailabilityImpl
