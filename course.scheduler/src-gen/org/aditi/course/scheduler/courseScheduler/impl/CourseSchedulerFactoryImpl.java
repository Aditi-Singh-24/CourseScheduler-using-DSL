/**
 * generated by Xtext 2.38.0
 */
package org.aditi.course.scheduler.courseScheduler.impl;

import org.aditi.course.scheduler.courseScheduler.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class CourseSchedulerFactoryImpl extends EFactoryImpl implements CourseSchedulerFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static CourseSchedulerFactory init()
  {
    try
    {
      CourseSchedulerFactory theCourseSchedulerFactory = (CourseSchedulerFactory)EPackage.Registry.INSTANCE.getEFactory(CourseSchedulerPackage.eNS_URI);
      if (theCourseSchedulerFactory != null)
      {
        return theCourseSchedulerFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new CourseSchedulerFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public CourseSchedulerFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case CourseSchedulerPackage.COURSE_SCHEDULER: return createCourseScheduler();
      case CourseSchedulerPackage.ELEMENT: return createElement();
      case CourseSchedulerPackage.COURSE: return createCourse();
      case CourseSchedulerPackage.ROOM: return createRoom();
      case CourseSchedulerPackage.AVAILABILITY: return createAvailability();
      case CourseSchedulerPackage.TIME_SLOT: return createTimeSlot();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case CourseSchedulerPackage.DAY:
        return createDayFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case CourseSchedulerPackage.DAY:
        return convertDayToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CourseScheduler createCourseScheduler()
  {
    CourseSchedulerImpl courseScheduler = new CourseSchedulerImpl();
    return courseScheduler;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Element createElement()
  {
    ElementImpl element = new ElementImpl();
    return element;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Course createCourse()
  {
    CourseImpl course = new CourseImpl();
    return course;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Room createRoom()
  {
    RoomImpl room = new RoomImpl();
    return room;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Availability createAvailability()
  {
    AvailabilityImpl availability = new AvailabilityImpl();
    return availability;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TimeSlot createTimeSlot()
  {
    TimeSlotImpl timeSlot = new TimeSlotImpl();
    return timeSlot;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Day createDayFromString(EDataType eDataType, String initialValue)
  {
    Day result = Day.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertDayToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CourseSchedulerPackage getCourseSchedulerPackage()
  {
    return (CourseSchedulerPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static CourseSchedulerPackage getPackage()
  {
    return CourseSchedulerPackage.eINSTANCE;
  }

} //CourseSchedulerFactoryImpl
