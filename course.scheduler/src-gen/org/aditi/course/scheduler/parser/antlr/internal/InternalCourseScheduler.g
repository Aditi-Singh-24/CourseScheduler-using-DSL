/*
 * generated by Xtext 2.38.0
 */
grammar InternalCourseScheduler;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.aditi.course.scheduler.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.aditi.course.scheduler.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.aditi.course.scheduler.services.CourseSchedulerGrammarAccess;

}

@parser::members {

 	private CourseSchedulerGrammarAccess grammarAccess;

    public InternalCourseSchedulerParser(TokenStream input, CourseSchedulerGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "CourseScheduler";
   	}

   	@Override
   	protected CourseSchedulerGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleCourseScheduler
entryRuleCourseScheduler returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCourseSchedulerRule()); }
	iv_ruleCourseScheduler=ruleCourseScheduler
	{ $current=$iv_ruleCourseScheduler.current; }
	EOF;

// Rule CourseScheduler
ruleCourseScheduler returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getCourseSchedulerAccess().getElementsElementParserRuleCall_0());
			}
			lv_elements_0_0=ruleElement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getCourseSchedulerRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"org.aditi.course.scheduler.CourseScheduler.Element");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleElement
entryRuleElement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getElementRule()); }
	iv_ruleElement=ruleElement
	{ $current=$iv_ruleElement.current; }
	EOF;

// Rule Element
ruleElement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getElementAccess().getCourseParserRuleCall_0());
		}
		this_Course_0=ruleCourse
		{
			$current = $this_Course_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getRoomParserRuleCall_1());
		}
		this_Room_1=ruleRoom
		{
			$current = $this_Room_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getTimeSlotParserRuleCall_2());
		}
		this_TimeSlot_2=ruleTimeSlot
		{
			$current = $this_TimeSlot_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getElementAccess().getScheduleTriggerParserRuleCall_3());
		}
		ruleScheduleTrigger
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCourse
entryRuleCourse returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCourseRule()); }
	iv_ruleCourse=ruleCourse
	{ $current=$iv_ruleCourse.current; }
	EOF;

// Rule Course
ruleCourse returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='course'
		{
			newLeafNode(otherlv_0, grammarAccess.getCourseAccess().getCourseKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getCourseAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCourseRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='teacher'
		{
			newLeafNode(otherlv_2, grammarAccess.getCourseAccess().getTeacherKeyword_2());
		}
		(
			(
				lv_teacherName_3_0=RULE_STRING
				{
					newLeafNode(lv_teacherName_3_0, grammarAccess.getCourseAccess().getTeacherNameSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCourseRule());
					}
					setWithLastConsumed(
						$current,
						"teacherName",
						lv_teacherName_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_4='teacher_id'
		{
			newLeafNode(otherlv_4, grammarAccess.getCourseAccess().getTeacher_idKeyword_4());
		}
		(
			(
				lv_teacherId_5_0=RULE_STRING
				{
					newLeafNode(lv_teacherId_5_0, grammarAccess.getCourseAccess().getTeacherIdSTRINGTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCourseRule());
					}
					setWithLastConsumed(
						$current,
						"teacherId",
						lv_teacherId_5_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_6='duration'
		{
			newLeafNode(otherlv_6, grammarAccess.getCourseAccess().getDurationKeyword_6());
		}
		(
			(
				lv_duration_7_0=RULE_INT
				{
					newLeafNode(lv_duration_7_0, grammarAccess.getCourseAccess().getDurationINTTerminalRuleCall_7_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCourseRule());
					}
					setWithLastConsumed(
						$current,
						"duration",
						lv_duration_7_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_8='h'
		{
			newLeafNode(otherlv_8, grammarAccess.getCourseAccess().getHKeyword_8());
		}
		otherlv_9='sessions'
		{
			newLeafNode(otherlv_9, grammarAccess.getCourseAccess().getSessionsKeyword_9());
		}
		(
			(
				lv_sessions_10_0=RULE_INT
				{
					newLeafNode(lv_sessions_10_0, grammarAccess.getCourseAccess().getSessionsINTTerminalRuleCall_10_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCourseRule());
					}
					setWithLastConsumed(
						$current,
						"sessions",
						lv_sessions_10_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_11='student_count'
		{
			newLeafNode(otherlv_11, grammarAccess.getCourseAccess().getStudent_countKeyword_11());
		}
		(
			(
				lv_studentCount_12_0=RULE_INT
				{
					newLeafNode(lv_studentCount_12_0, grammarAccess.getCourseAccess().getStudentCountINTTerminalRuleCall_12_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCourseRule());
					}
					setWithLastConsumed(
						$current,
						"studentCount",
						lv_studentCount_12_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_13='day'
		{
			newLeafNode(otherlv_13, grammarAccess.getCourseAccess().getDayKeyword_13());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCourseAccess().getDayDayEnumRuleCall_14_0());
				}
				lv_day_14_0=ruleDay
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCourseRule());
					}
					set(
						$current,
						"day",
						lv_day_14_0,
						"org.aditi.course.scheduler.CourseScheduler.Day");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_15='batches'
		{
			newLeafNode(otherlv_15, grammarAccess.getCourseAccess().getBatchesKeyword_15());
		}
		otherlv_16='['
		{
			newLeafNode(otherlv_16, grammarAccess.getCourseAccess().getLeftSquareBracketKeyword_16());
		}
		(
			(
				lv_batches_17_0=RULE_STRING
				{
					newLeafNode(lv_batches_17_0, grammarAccess.getCourseAccess().getBatchesSTRINGTerminalRuleCall_17_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCourseRule());
					}
					addWithLastConsumed(
						$current,
						"batches",
						lv_batches_17_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_18=','
			{
				newLeafNode(otherlv_18, grammarAccess.getCourseAccess().getCommaKeyword_18_0());
			}
			(
				(
					lv_batches_19_0=RULE_STRING
					{
						newLeafNode(lv_batches_19_0, grammarAccess.getCourseAccess().getBatchesSTRINGTerminalRuleCall_18_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCourseRule());
						}
						addWithLastConsumed(
							$current,
							"batches",
							lv_batches_19_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)*
		otherlv_20=']'
		{
			newLeafNode(otherlv_20, grammarAccess.getCourseAccess().getRightSquareBracketKeyword_19());
		}
		otherlv_21='prefers'
		{
			newLeafNode(otherlv_21, grammarAccess.getCourseAccess().getPrefersKeyword_20());
		}
		otherlv_22='['
		{
			newLeafNode(otherlv_22, grammarAccess.getCourseAccess().getLeftSquareBracketKeyword_21());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCourseAccess().getPrefersDayEnumRuleCall_22_0());
				}
				lv_prefers_23_0=ruleDay
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCourseRule());
					}
					add(
						$current,
						"prefers",
						lv_prefers_23_0,
						"org.aditi.course.scheduler.CourseScheduler.Day");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_24=','
			{
				newLeafNode(otherlv_24, grammarAccess.getCourseAccess().getCommaKeyword_23_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCourseAccess().getPrefersDayEnumRuleCall_23_1_0());
					}
					lv_prefers_25_0=ruleDay
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCourseRule());
						}
						add(
							$current,
							"prefers",
							lv_prefers_25_0,
							"org.aditi.course.scheduler.CourseScheduler.Day");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_26=']'
		{
			newLeafNode(otherlv_26, grammarAccess.getCourseAccess().getRightSquareBracketKeyword_24());
		}
		otherlv_27='preferred_sessions'
		{
			newLeafNode(otherlv_27, grammarAccess.getCourseAccess().getPreferred_sessionsKeyword_25());
		}
		otherlv_28='['
		{
			newLeafNode(otherlv_28, grammarAccess.getCourseAccess().getLeftSquareBracketKeyword_26());
		}
		(
			(
				lv_preferredSessions_29_0=RULE_INT
				{
					newLeafNode(lv_preferredSessions_29_0, grammarAccess.getCourseAccess().getPreferredSessionsINTTerminalRuleCall_27_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCourseRule());
					}
					addWithLastConsumed(
						$current,
						"preferredSessions",
						lv_preferredSessions_29_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			otherlv_30=','
			{
				newLeafNode(otherlv_30, grammarAccess.getCourseAccess().getCommaKeyword_28_0());
			}
			(
				(
					lv_preferredSessions_31_0=RULE_INT
					{
						newLeafNode(lv_preferredSessions_31_0, grammarAccess.getCourseAccess().getPreferredSessionsINTTerminalRuleCall_28_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getCourseRule());
						}
						addWithLastConsumed(
							$current,
							"preferredSessions",
							lv_preferredSessions_31_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)*
		otherlv_32=']'
		{
			newLeafNode(otherlv_32, grammarAccess.getCourseAccess().getRightSquareBracketKeyword_29());
		}
	)
;

// Entry rule entryRuleRoom
entryRuleRoom returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRoomRule()); }
	iv_ruleRoom=ruleRoom
	{ $current=$iv_ruleRoom.current; }
	EOF;

// Rule Room
ruleRoom returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='room'
		{
			newLeafNode(otherlv_0, grammarAccess.getRoomAccess().getRoomKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRoomAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRoomRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_2='capacity'
		{
			newLeafNode(otherlv_2, grammarAccess.getRoomAccess().getCapacityKeyword_2());
		}
		(
			(
				lv_capacity_3_0=RULE_INT
				{
					newLeafNode(lv_capacity_3_0, grammarAccess.getRoomAccess().getCapacityINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRoomRule());
					}
					setWithLastConsumed(
						$current,
						"capacity",
						lv_capacity_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		otherlv_4='available'
		{
			newLeafNode(otherlv_4, grammarAccess.getRoomAccess().getAvailableKeyword_4());
		}
		otherlv_5='['
		{
			newLeafNode(otherlv_5, grammarAccess.getRoomAccess().getLeftSquareBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRoomAccess().getAvailabilityAvailabilityParserRuleCall_6_0());
				}
				lv_availability_6_0=ruleAvailability
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRoomRule());
					}
					add(
						$current,
						"availability",
						lv_availability_6_0,
						"org.aditi.course.scheduler.CourseScheduler.Availability");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_7=','
			{
				newLeafNode(otherlv_7, grammarAccess.getRoomAccess().getCommaKeyword_7_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRoomAccess().getAvailabilityAvailabilityParserRuleCall_7_1_0());
					}
					lv_availability_8_0=ruleAvailability
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRoomRule());
						}
						add(
							$current,
							"availability",
							lv_availability_8_0,
							"org.aditi.course.scheduler.CourseScheduler.Availability");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_9=']'
		{
			newLeafNode(otherlv_9, grammarAccess.getRoomAccess().getRightSquareBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleAvailability
entryRuleAvailability returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAvailabilityRule()); }
	iv_ruleAvailability=ruleAvailability
	{ $current=$iv_ruleAvailability.current; }
	EOF;

// Rule Availability
ruleAvailability returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getAvailabilityAccess().getDayDayEnumRuleCall_0_0());
				}
				lv_day_0_0=ruleDay
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAvailabilityRule());
					}
					set(
						$current,
						"day",
						lv_day_0_0,
						"org.aditi.course.scheduler.CourseScheduler.Day");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_start_1_0=RULE_TIME
				{
					newLeafNode(lv_start_1_0, grammarAccess.getAvailabilityAccess().getStartTIMETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAvailabilityRule());
					}
					setWithLastConsumed(
						$current,
						"start",
						lv_start_1_0,
						"org.aditi.course.scheduler.CourseScheduler.TIME");
				}
			)
		)
		otherlv_2='-'
		{
			newLeafNode(otherlv_2, grammarAccess.getAvailabilityAccess().getHyphenMinusKeyword_2());
		}
		(
			(
				lv_end_3_0=RULE_TIME
				{
					newLeafNode(lv_end_3_0, grammarAccess.getAvailabilityAccess().getEndTIMETerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAvailabilityRule());
					}
					setWithLastConsumed(
						$current,
						"end",
						lv_end_3_0,
						"org.aditi.course.scheduler.CourseScheduler.TIME");
				}
			)
		)
	)
;

// Entry rule entryRuleTimeSlot
entryRuleTimeSlot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimeSlotRule()); }
	iv_ruleTimeSlot=ruleTimeSlot
	{ $current=$iv_ruleTimeSlot.current; }
	EOF;

// Rule TimeSlot
ruleTimeSlot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='time_slot'
		{
			newLeafNode(otherlv_0, grammarAccess.getTimeSlotAccess().getTime_slotKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_STRING
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTimeSlotAccess().getNameSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTimeSlotRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				lv_start_2_0=RULE_TIME
				{
					newLeafNode(lv_start_2_0, grammarAccess.getTimeSlotAccess().getStartTIMETerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTimeSlotRule());
					}
					setWithLastConsumed(
						$current,
						"start",
						lv_start_2_0,
						"org.aditi.course.scheduler.CourseScheduler.TIME");
				}
			)
		)
		otherlv_3='-'
		{
			newLeafNode(otherlv_3, grammarAccess.getTimeSlotAccess().getHyphenMinusKeyword_3());
		}
		(
			(
				lv_end_4_0=RULE_TIME
				{
					newLeafNode(lv_end_4_0, grammarAccess.getTimeSlotAccess().getEndTIMETerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTimeSlotRule());
					}
					setWithLastConsumed(
						$current,
						"end",
						lv_end_4_0,
						"org.aditi.course.scheduler.CourseScheduler.TIME");
				}
			)
		)
	)
;

// Entry rule entryRuleScheduleTrigger
entryRuleScheduleTrigger returns [String current=null]:
	{ newCompositeNode(grammarAccess.getScheduleTriggerRule()); }
	iv_ruleScheduleTrigger=ruleScheduleTrigger
	{ $current=$iv_ruleScheduleTrigger.current.getText(); }
	EOF;

// Rule ScheduleTrigger
ruleScheduleTrigger returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='schedule'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getScheduleTriggerAccess().getScheduleKeyword_0());
		}
		kw='auto'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getScheduleTriggerAccess().getAutoKeyword_1());
		}
	)
;

// Rule Day
ruleDay returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Mon'
			{
				$current = grammarAccess.getDayAccess().getMonEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getDayAccess().getMonEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Tue'
			{
				$current = grammarAccess.getDayAccess().getTueEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getDayAccess().getTueEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Wed'
			{
				$current = grammarAccess.getDayAccess().getWedEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getDayAccess().getWedEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='Thu'
			{
				$current = grammarAccess.getDayAccess().getThuEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getDayAccess().getThuEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='Fri'
			{
				$current = grammarAccess.getDayAccess().getFriEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getDayAccess().getFriEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='Sat'
			{
				$current = grammarAccess.getDayAccess().getSatEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getDayAccess().getSatEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='Sun'
			{
				$current = grammarAccess.getDayAccess().getSunEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getDayAccess().getSunEnumLiteralDeclaration_6());
			}
		)
	)
;

RULE_TIME : '0'..'2' '0'..'9' ':' '0'..'5' '0'..'9';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
